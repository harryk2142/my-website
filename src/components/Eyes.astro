<!-- 
README:
Das Elternelement braucht eine Höhe.
Der Eye-Container nimmt dann die Höhe vom Element an.
Die Hintergrundfarbe kann im Style angepasst werden.
-->
<div id="eye-container" class="eye-container primary">
  <div id="upper-lid" class="upper-lid primary"></div>
  <canvas id="eye-canvas" class="eye-canvas"></canvas>
</div>
<script>
  interface Point {
    x: number;
    y: number;
  }

  const fitToContainer = (canvas: HTMLCanvasElement) => {
    canvas.style.width = "100%";
    canvas.style.height = "100%";
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;
  };
  const calculateLeftPoint = () => {
    const halfCanvasHeight = canvas.height / 2;
    return { x: canvas.width / 2 - halfCanvasHeight, y: halfCanvasHeight };
  };
  const calculateRightPoint = () => {
    const halfCanvasHeight = canvas.height / 2;
    return { x: canvas.width / 2 + halfCanvasHeight, y: halfCanvasHeight };
  };

  const canvas = document.getElementById("eye-canvas") as HTMLCanvasElement;

  fitToContainer(canvas);

  const upperLid = document.getElementById("upper-lid") as HTMLElement;
  upperLid.style.width = canvas.width + "px";
  upperLid.style.maxHeight = canvas.height + "px";
  upperLid.style.height = canvas.height + "px";
  const context = canvas.getContext("2d")!;
  let pointEye1: Point = calculateLeftPoint();
  let pointEye2: Point = calculateRightPoint();
  const radius = (canvas.height - 20) / 2;
  function drawEye(
    { x: centerX, y: centerY }: { x: number; y: number },
    mousePosition: Point
  ) {
    context.beginPath();
    context.arc(centerX, centerY, radius, 0, 2 * Math.PI);
    context.fillStyle = "white";
    context.fill();
    context.lineWidth = 5;
    context.strokeStyle = "black";
    context.stroke();

    const pupilPosition = getPupilPosition(
      { x: centerX, y: centerY },
      mousePosition
    );
    const pupilRadius = radius / 2;

    context.beginPath();
    context.arc(pupilPosition.x, pupilPosition.y, pupilRadius, 0, 2 * Math.PI);
    context.fillStyle = "black";
    context.fill();
  }

  function getPupilPosition(center: Point, mousePosition: Point): Point {
    const distance = Math.sqrt(
      Math.pow(mousePosition.x - center.x, 2) +
        Math.pow(mousePosition.y - center.y, 2)
    );
    const pupilRadius = radius / 2;
    const maxDistance = radius - pupilRadius;
    if (distance > maxDistance) {
      const angle = Math.atan2(
        mousePosition.y - center.y,
        mousePosition.x - center.x
      );
      return {
        x: center.x + Math.cos(angle) * maxDistance,
        y: center.y + Math.sin(angle) * maxDistance,
      };
    }
    return {
      x: mousePosition.x,
      y: mousePosition.y,
    };
  }

  function getMousePosition(event: MouseEvent): Point {
    return {
      x: event.clientX - canvas.getBoundingClientRect().left,
      y: event.clientY - canvas.getBoundingClientRect().top,
    };
  }

  document.addEventListener("mousemove", (event) => {
    const mousePosition = getMousePosition(event);
    context.clearRect(0, 0, canvas.width, canvas.height);
    drawEye(pointEye1, mousePosition);
    drawEye(pointEye2, mousePosition);
  });
  drawEye(pointEye1, pointEye1);
  drawEye(pointEye2, pointEye2);
  window.addEventListener("resize", (event) => {
    fitToContainer(canvas);
    upperLid.style.width = canvas.width + "px";
    upperLid.style.maxHeight = canvas.height + "px";
    upperLid.style.height = canvas.height + "px";
    pointEye1 = calculateLeftPoint();
    pointEye2 = calculateRightPoint();
    drawEye(pointEye1, pointEye1);
    drawEye(pointEye2, pointEye2);
  });
</script>
<style>
  @keyframes blink {
    0% {
      height: 0%;
    }
    48% {
      height: 0%;
    }
    50% {
      height: 100%;
    }
    52% {
      height: 0%;
    }
    100% {
      height: 0%;
    }
  }

  #upper-lid {
    position: absolute;
    background: var(--primary-color);
    animation: blink 10s infinite;
  }
  #eye-container {
    background: var(--primary-color);
    height: 100%;
    aspect-ratio: 2 / 1;
  }
</style>
