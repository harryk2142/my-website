---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";

import GlobalImports from "./../components/GlobalImports.astro";
import MetaImports from "./../components/MetaImports.astro";
import NavigationBar from "./../components/NavigationBar.astro";
import Left from "../components/Blogpost/Left.astro";
import Comments from "../components/Blogpost/Comments.astro";

const debug = Boolean(import.meta.env.PUBLIC_DEBUG);

type Props = CollectionEntry<"blog">["data"];
const pathSegments = Astro.request.url.split("/");
const blogPostIdentifier = pathSegments.at(pathSegments.length - 2) as string;
const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  shareImage,
  place,
  tags,
} = Astro.props;
---

<html lang="de">
  <head>
    <GlobalImports />
    <MetaImports
      title={title}
      description={description}
      image={heroImage.url}
      alt={heroImage.alt}
    />
    <style is:inline>
      #blogpost-container {
        max-width: calc(100% - 3rem);
        margin: auto;
        padding: 0 2rem;
        color: rgb(var(--gray-dark));

        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        row-gap: 0.5rem;

        & .hero-image-block {
          overflow: hidden;
          width: calc(100% - 2rem);
          aspect-ratio: 1;
          display: block;
          margin: 2rem auto;
          border-radius: 2rem;
          /* box-shadow: var(--box-shadow); */
          max-width: 500px;
        }

        & #blogpost-image > img {
        }

        & #place {
          text-align: center;
        }

        & #blogpost-title {
          /* margin-bottom: 1em; */
          /* padding: 0.5rem 0; */
          text-align: center;
          line-height: 1;

          & h1 {
            margin-bottom: 1rem;
          }
        }

        & #date {
          display: flex;
          justify-content: center;
          /* margin-bottom: 0.5em; */
          color: rgb(var(--gray));
        }

        & .last-updated-on {
          /* margin-bottom: 0.5em; */
          color: rgb(var(--gray));
          font-style: italic;
        }

        & #tags {
          /* margin-bottom: 0.5em; */
          /* text-align: justify; */
          font-size: smaller;

          & .link-tag {
            text-decoration: none;
          }

          & .link-tag:hover {
            color: var(--element-water-dark);
          }
        }

        & hr {
          border: 2px solid black;
          width: 100%;
          margin: 1rem 0;
        }

        & #article {
          text-align: justify;

          & p {
            margin-bottom: 2em;
          }
        }
      }
      ol {
        counter-reset: list-counter; /* Einen Zähler für die Liste initialisieren */
        list-style: none; /* Standard-Listensymbole entfernen */
        padding-left: 0; /* Linken Abstand entfernen */
      }

      ol li {
        counter-increment: list-counter; /* Zähler für jedes Listenelement erhöhen */
        display: flex; /* Flexbox für das Listenelement verwenden */
        align-items: baseline; /* Elemente in einer Zeile ausrichten */
      }

      ol li::before {
        content: counter(list-counter) "."; /* Nummerierung mit Punkt anzeigen */
        margin-right: 10px; /* Abstand zwischen Nummer und Text */
      }
    </style>
  </head>

  <body>
    <NavigationBar isStartPage={false} />
    <main class="wrapper">
      <span hidden id="blog-post-identifier" data-pagefind-ignore
        >{blogPostIdentifier}</span
      >
      <span hidden id="blog-post-id" data-pagefind-ignore></span>
      <Left />

      <article id="blogpost-container">
        <div id="blogpost-image">
          {
            heroImage && (
              <div class="hero-image-block">
                <Image
                  src={heroImage.url}
                  alt={heroImage.alt}
                  width="600"
                  height="600"
                />
                <img
                  hidden
                  data-pagefind-index-attrs="alt"
                  data-pagefind-meta="image[src], image_alt[alt]"
                  src={heroImage.url.replace("/blog/", "/blog/small/")}
                  alt={heroImage.alt}
                />
              </div>
            )
          }
        </div>
        <div id="blogpost-title">
          <h1 data-pagefind-meta="title">{title}</h1>
        </div>
        {place && <p id="place">{place}</p>}
        {
          pubDate && (
            <div id="date">
              <FormattedDate date={pubDate} />
            </div>
          )
        }
        {
          updatedDate && (
            <div class="last-updated-on">
              Last updated on <FormattedDate date={updatedDate} />
            </div>
          )
        }
        {
          tags && (
            <div id="tags">
              {tags.map((tag) => (
                <a href={`/tags/${tag}`} class="link-tag">
                  #{tag}
                </a>
              ))}
            </div>
          )
        }
        <hr />
        <div id="article">
          <slot />
        </div>
        <Comments />
      </article>
    </main>
    <script>
      import {
        loadBlogpost,
        createBlogpost,
      } from "../features/blogpost/blogpost-service";

      import { createCommentForm } from "../features/comments/commentForm";
      import { createCommentsBox } from "../features/comments/commentsBlock";

      import { loadLikes, submitLike } from "../features/like/like-service";

      setTimeout(async () => {
        const blogPostIdentifier = (
          document.querySelector("#blog-post-identifier") as HTMLElement
        ).innerText;
        loadBlogpost(blogPostIdentifier).then(async (blogPost) => {
          if (blogPost) {
            (document.querySelector("#blog-post-id") as HTMLElement).innerText =
              blogPost.id;
          } else {
            const newId = await createBlogpost(blogPostIdentifier);
            (document.querySelector("#blog-post-id") as HTMLElement).innerText =
              newId;
          }
          let blogPostId = (
            document.querySelector("#blog-post-id") as HTMLElement
          ).innerText;
          loadLikes(blogPostId);
          (
            document.querySelector("#like-btn") as HTMLButtonElement
          ).addEventListener("click", async () => {
            const newLikeCount = await submitLike(blogPostId);
            (document.querySelector("#like-counter") as HTMLElement).innerText =
              newLikeCount.toString();
          });

          const parent = document.querySelector("#comment-form-container");

          parent && createCommentForm(parent, blogPostId);

          createCommentsBox(blogPostId);
        });
      }, 500);
    </script>
    <Footer />
  </body>
</html>
