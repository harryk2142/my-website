---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import MainHeader from "../components/MainHeader.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import Main from "../components/Main.astro";
import LeftAside from "../components/BlogPost/Left.astro";
import Comments from "../components/BlogPost/Comments.astro";
import CommentInputTemplate from "../components/BlogPost/CommentInputTemplate.astro";
import CommentTemplate from "../components/BlogPost/CommentTemplate.astro";

type Props = CollectionEntry<"blog">["data"];
const pathSegments = Astro.request.url.split("/");
const blogPostIdentifier = pathSegments.at(pathSegments.length - 2);
const { id, title, description, pubDate, postImage, tags } = Astro.props;
---

<html lang="de">
  <head>
    <BaseHead
      title={title}
      description={description}
      image={"images/blog/" + postImage?.prevSrc}
      type={"article"}
    />
    <style>
      .blog-post-img-container {
        width: 100%;
        max-width: 450px;
        margin-top: 10px;
        margin-bottom: 10px;
        margin-left: auto;
        margin-right: auto;
      }
      article {
        text-align: center;
        margin-left: auto;
        margin-right: auto;
        max-width: 700px;
        word-wrap: break-word;
        padding-bottom: 20px;
      }
      article h2 {
        margin-bottom: 10px;
      }
      #publication-date {
        font-size: larger;
        color: var(--element-water-dark);
        font-weight: bold;
        font-style: italic;
      }
      #main-content {
        font-size: 1.25rem;
      }
      /* Style page content */
      #blogpost-container {
        margin-left: 40px; /* Same as the width of the sidebar */
        padding: 0px 10px;
      }
    </style>
  </head>

  <body>
    <MainHeader />
    <Main>
      <span hidden id="blog-post-identifier">{blogPostIdentifier}</span>
      <span hidden id="blog-post-id"></span>
      <LeftAside />
      <article id="blogpost-container">
        <h1 class="title container" id="title">{description}</h1>
        <span id="publication-date"><FormattedDate date={pubDate} /></span>
        {
          postImage && (
            <div class="blog-post-img-container">
              <img
                hidden
                src={"/images/blog/" + postImage.prevSrc}
                alt={postImage.alt}
              />
              <img src={"/images/blog/" + postImage.src} alt={postImage.alt} />
            </div>
          )
        }
        <p class="">
          {
            tags &&
              tags.map((tag) => (
                <a href={`/tags/${tag}`} class="link-tag">
                  #{tag}
                </a>
              ))
          }
        </p>
        <section id="main-content">
          <slot />
        </section>
        <CommentInputTemplate />
        <CommentTemplate />
        <div id="comment-form-container" style="margin-top:20px">
          <h3>Kommentar hinzuf√ºgen</h3>
          <div id="new-comment-form"></div>
        </div>
        <Comments />
      </article>
    </Main>

    <style>
      .link-tag {
        color: var(--element-water-dark);
      }
    </style>
    <script>
      import {
        loadBlogPost,
        createBlogPost,
      } from "../components/BlogPost/BlogPostController";

      import {
        createCommentBox,
        createCommentsBox,
        createCommentInputForm,
      } from "../components/BlogPost/CommentController";

      import {
        loadLikes,
        submitLike,
      } from "../components/BlogPost/LikeController";

      setTimeout(async () => {
        const blogPostIdentifier = document.querySelector(
          "#blog-post-identifier"
        ).innerText;
        loadBlogPost(blogPostIdentifier).then(async (blogPost) => {
          if (blogPost) {
            document.querySelector("#blog-post-id").innerText = blogPost.id;
          } else {
            const newId = await createBlogPost(blogPostIdentifier);
            document.querySelector("#blog-post-id").innerText = newId;
          }
          let blogPostId = document.querySelector("#blog-post-id").innerText;
          loadLikes(blogPostId);
          document
            .querySelector("#like-btn")
            .addEventListener("click", async () => {
              const newLikeCount = await submitLike(blogPostId);
              document.querySelector("#like-counter").innerText = newLikeCount;
            });

          const createdForm = createCommentInputForm(blogPostId);
          (
            document.querySelector("#comment-form-container") as HTMLElement
          ).appendChild(createdForm);
          createCommentsBox(blogPostId);
        });
      }, 500);
    </script>
    <Footer />
  </body>
</html>
