---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import MainHeader from "../components/MainHeader.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import Main from "../components/Main.astro";
import LeftAside from "../components/BlogPost/Left.astro";
import Comments from "../components/BlogPost/Comments.astro";

type Props = CollectionEntry<"blog">["data"];
const pathSegments = Astro.request.url.split("/");
const blogPostIdentifier = pathSegments.at(pathSegments.length - 2);
const { id, title, description, pubDate, postImage, tags } = Astro.props;
---

<html lang="de">
  <head>
    <BaseHead
      title={title}
      description={description}
      image={"images/blog/" + postImage?.prevSrc}
      type={"article"}
    />
    <style>
      .blog-post-img-container {
        width: 100%;
        max-width: 450px;
        margin-top: 10px;
        margin-bottom: 10px;
        margin-left: auto;
        margin-right: auto;
      }
      article {
        text-align: center;
        margin-left: auto;
        margin-right: auto;
        max-width: 700px;
        word-wrap: break-word;
        padding-bottom: 20px;
      }
      article h2 {
        margin-bottom: 10px;
      }
      #publication-date {
        font-size: larger;
        color: var(--element-water-dark);
        font-weight: bold;
        font-style: italic;
      }
      #main-content {
        font-size: 1.25rem;
      }
      /* Style page content */
      #blogpost-container {
        margin-left: 40px; /* Same as the width of the sidebar */
        padding: 0px 10px;
      }
    </style>
  </head>

  <body>
    <MainHeader />
    <Main>
      <span hidden id="blog-post-identifier">{blogPostIdentifier}</span>
      <span hidden id="post-id">-</span>
      <LeftAside />
      <article id="blogpost-container">
        <h1 class="title container" id="title">{description}</h1>
        <span id="publication-date"><FormattedDate date={pubDate} /></span>
        {
          postImage && (
            <div class="blog-post-img-container">
              <img src={"/images/blog/" + postImage.src} alt={postImage.alt} />
            </div>
          )
        }
        <p class="">
          {
            tags &&
              tags.map((tag) => (
                <a href={`/tags/${tag}`} class="link-tag">
                  #{tag}
                </a>
              ))
          }
        </p>
        <section id="main-content">
          <slot />
        </section>
        <div id="comments-box">
          <div id="send-comment-template" hidden>
            <input type="hidden" id="bot-protection" />
            <label id="lbl-username" for="username">Username (optional):</label>
            <input
              type="text"
              id="username"
              class="username"
              autocomplete="off"
              placeholder="Anonym"
            />
            <label id="lbl-comment-text" for="comment-text">Kommentar:</label>
            <textarea
              id="comment-text"
              cols="45"
              rows="8"
              placeholder="Hier eigeben..."
              autocomplete="off"></textarea>
            <button id="submit-comment-btn" type="submit" class="primary"
              >Absenden</button
            >
          </div>
          <div id="send-reply-template" hidden>
            <input type="hidden" id="reply-bot-protection" />
            <label id="lbl-reply-username" for="reply-username"
              >Username (optional):</label
            >
            <input
              type="text"
              class="username"
              id="reply-username"
              autocomplete="off"
              placeholder="Anonym"
            />
            <label id="lbl-reply-text" for="reply-text">Kommentar:</label>
            <textarea
              id="reply-text"
              cols="45"
              rows="8"
              placeholder="Hier eigeben..."
              autocomplete="off"></textarea>
            <button id="abbrechen-reply-btn" type="submit" class="abbrechen-btn"
              >Abbrechen</button
            >
            <button id="submit-reply-btn" type="submit" class="primary"
              >Absenden</button
            >
          </div>
        </div>

        <div id="comment-form-container" style="margin-top:20px">
          <h3>Kommentar hinzuf√ºgen</h3>
          <div id="new-comment-form"></div>
        </div>

        <Comments />
      </article>
    </Main>

    <style>
      .link-tag {
        color: var(--element-water-dark);
      }
    </style>
    <script>
      import {
        addComment,
        addCommentReply,
        getApp,
        getBlogPostByIdentifier,
        getPostById,
        getComments,
        savePost,
        like,
      } from "../scripts/firebase";
      // lade ID
      function main() {
        const clonedForm = document
          .querySelector("#send-comment-template")
          .cloneNode(true);
        clonedForm.hidden = false;
        document.querySelector("#new-comment-form").appendChild(clonedForm);
      }
      main();

      function showReplyBox(parent, commentID) {
        const clonedForm = document
          .querySelector("#send-reply-template")
          .cloneNode(true);
        clonedForm.hidden = false;
        clonedForm.id = "reply-box-" + commentID;
        clonedForm.className = "comment-reply-input-block";

        const hiddenParentID = document.createElement("input");
        hiddenParentID.textContent = commentID;
        hiddenParentID.style.display = "none";
        clonedForm.appendChild(hiddenParentID);
        const clonedUsernameInput = clonedForm.querySelector("#reply-username");
        clonedUsernameInput.id = "comment-reply-username-" + commentID;
        const clonedTextInput = clonedForm.querySelector("#reply-text");
        clonedTextInput.id = "comment-reply-text-" + commentID;

        const clonedAbbrechenBtn = clonedForm.querySelector(
          "#abbrechen-reply-btn"
        );
        clonedAbbrechenBtn.id = "abbrechen-btn-" + commentID;
        const clonedSubmitReplyBtn =
          clonedForm.querySelector("#submit-reply-btn");
        clonedSubmitReplyBtn.id = "send-reply-btn-" + commentID;
        parent.insertBefore(clonedForm, parent.children[4]);
        clonedAbbrechenBtn.addEventListener("click", (event) => {
          // @ts-ignore
          const id = event.target.id
            .split("-")
            .at(event.target.id.split("-").length - 1);
          const box = document.querySelector("#reply-box-" + id);
          box.parentNode.removeChild(box);
        });
        clonedSubmitReplyBtn.addEventListener("click", async (event) => {
          // @ts-ignore
          const id = event.target.id
            .split("-")
            .at(event.target.id.split("-").length - 1);
          const box = document.querySelector("#reply-box-" + id);
          const postID = document.querySelector("#post-id").innerText;
          const text = document.querySelector(
            "#comment-reply-text-" + id
          ).value;
          let username = document.querySelector(
            "#comment-reply-username-" + id
          ).value;
          if (!username) {
            username = "ANONYM";
          }

          if (text) {
            await submitReply(postID, id, text, username);
            setTimeout(() => {
              window.location.reload();
            }, 500);
          }
          box.parentNode.removeChild(box);
        });
      }

      const loadId = async () => {
        const blogPostIdentifier = document.querySelector(
          "#blog-post-identifier"
        ).innerText;
        const app = await getApp();
        const post = await getBlogPostByIdentifier(app, blogPostIdentifier);
        if (post) {
          return post.id;
        }

        const newPostID = await savePost(app, blogPostIdentifier);
        return newPostID;
      };
      // lade likes
      const loadLikes = async (postID: string) => {
        const app = await getApp();
        const post = await getPostById(app, postID);
        if (post?.likes) {
          document.querySelector("#like-counter").innerText = post.likes;
        }
      };
      // click auf likes
      const submitLike = async (postID: string) => {
        const app = await getApp();
        const likes = like(app, postID);
        return likes;
      };
      // lade Kommentare
      const loadCommentsFromFirebase = async (postID: string) => {
        const app = await getApp();
        const comments = await getComments(app, postID);
        console.log(comments);
        return comments;
      };
      const fillCommentsWithReplies = (comments: Comment[]) => {
        function addReplies(comments: Comment[]) {
          comments.forEach((comment) => {
            const replies = comments.filter((c) => c.parentID === comment.id);
            if (replies.length > 0) {
              comment.replies = replies;
              addReplies(replies);
            }
          });
        }
        addReplies(comments);
        const topLevelComments = comments.filter(
          (comment) => !comment.parentID
        );

        return topLevelComments;
      };
      // Kommentar zu HTML
      const fillHtmlCommentWithData = (commentDiv, element) => {
        var username = document.createElement("span");
        username.className = "comment-username";
        username.textContent = element.username;
        var date = document.createElement("span");
        date.className = "comment-date";
        date.textContent = new Date(element.date).toLocaleString();
        var textDiv = document.createElement("div");
        var text = document.createElement("span");
        text.className = "comment-text";
        text.textContent = element.text;
        textDiv.appendChild(text);
        var replyBtn = document.createElement("button");
        replyBtn.className = "reply-btn";
        replyBtn.id = "reply-btn-" + element.id;
        replyBtn.textContent = "Antworten";

        commentDiv.appendChild(username);
        commentDiv.appendChild(date);
        commentDiv.appendChild(textDiv);
        commentDiv.appendChild(replyBtn);
        replyBtn.addEventListener("click", async (event) => {
          const a = document.querySelector("#reply-box-" + element.id);
          if (a) {
            return;
          }
          showReplyBox(commentDiv, element.id);
        });
      };
      function addHtmlRepliesToParent(parent, replies) {
        replies.forEach((element) => {
          // Kommentar zur Liste hinzuf√ºgen
          var commentDiv = document.createElement("div");
          commentDiv.className = "comment-replies comment-block";
          commentDiv.id = element.id;
          fillHtmlCommentWithData(commentDiv, element);

          parent.appendChild(commentDiv);
          if (element.replies && element.replies.length > 0) {
            addHtmlRepliesToParent(commentDiv, element.replies);
          }
        });
      }
      function fillHtmlComment(comments) {
        comments.forEach((element) => {
          // Kommentar zur Liste hinzuf√ºgen
          var commentDiv = document.createElement("div");
          commentDiv.className = "comment-block";
          commentDiv.id = element.id;

          fillHtmlCommentWithData(commentDiv, element);

          if (element.replies && element.replies.length > 0) {
            addHtmlRepliesToParent(commentDiv, element.replies);
          }

          document.getElementById("comments")?.appendChild(commentDiv);
        });
      }

      // Sende Kommentar
      const submitComment = async (postId, text, username) => {
        const app = await getApp();
        addComment(app, postId, text, username);
        setTimeout(() => {
          window.location.reload();
        }, 500);
      };
      // Sende Antwort
      const submitReply = async (postId, parentCommentId, text, username) => {
        const app = await getApp();
        addCommentReply(app, postId, parentCommentId, text, username);
        setTimeout(() => {
          window.location.reload();
        }, 500);
      };

      setTimeout(() => {
        loadId().then((id) => {
          document.querySelector("#post-id").innerText = id;

          loadLikes(id);

          document
            .querySelector("#like-btn")
            .addEventListener("click", async () => {
              const newLikeCount = await submitLike(id);
              document.querySelector("#like-counter").innerText = newLikeCount;
            });

          loadCommentsFromFirebase(id).then((comments) => {
            if (comments.length > 0) {
              const commentsCounter = comments.length;
              document.querySelector("#comments-counter").innerText =
                commentsCounter;
              const commentsWithReplies = fillCommentsWithReplies(comments);
              console.log(commentsWithReplies);
              fillHtmlComment(commentsWithReplies);
            } else {
              const noCommentsSpan = document.createElement(
                "span"
              ) as HTMLElement;
              noCommentsSpan.innerText = "Keine Kommentare vorhanden";
              document.getElementById("comments")?.appendChild(noCommentsSpan);
            }
          });

          document
            .querySelector("#submit-comment-btn")
            .addEventListener("click", async (event) => {
              event.preventDefault();

              var botProtection =
                document.getElementById("bot-protection")?.value;
              if (botProtection) {
                // Bot erkannt, Formular nicht absenden
                return;
              }
              var text = document.getElementById("comment-text")?.value;
              if (!text) {
                return;
              }
              var parentCommentID =
                document.getElementById("parent-comment-id")?.value;
              var username = document.getElementById("username")?.value;
              if (!username) {
                username = "ANONYM";
              }

              submitComment(id, text, username);
            });
        });
      }, 500);
    </script>
    <Footer />
  </body>
</html>
